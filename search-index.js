var searchIndex = JSON.parse('{\
"reactor_rt":{"doc":"The runtime library for reactor programs generated by LFC,…","t":[13,13,3,3,18,18,13,3,3,3,13,3,3,18,18,18,18,13,18,13,18,13,3,3,13,18,4,16,3,3,3,3,3,3,8,8,3,8,3,3,13,18,18,18,3,3,4,3,3,16,3,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,10,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,0,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,3,3,3,18,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["After","Asap","AssemblyCtx","AssemblyError","CHECKS_MAX_INDEX","CHECKS_MAX_INDEX","DAY","Duration","EventTag","GlobalReactionId","HOUR","LocalReactionId","LogicalAction","MAX","MAX_INDEX","MAX_INDEX","MAX_REACTION_ID","MICRO","MICROSECOND","MILLI","MILLISECOND","MIN","MicroStep","MultiPort","NANO","NANOSECOND","Offset","Params","PhysicalAction","PhysicalActionRef","PhysicalInstant","PhysicalSchedulerLink","Port","ReactionCtx","ReactionTrigger","ReactorBehavior","ReactorId","ReactorInitializer","ReadableMultiPort","ReadablePort","SEC","SECOND","SHUTDOWN","STARTUP","SchedulerOptions","SyncScheduler","TimeUnit","Timer","TriggerId","Wrapped","WritablePort","ZERO","ZERO","ZERO","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","after","as_micros","as_millis","as_nanos","as_secs","as_secs_f32","as_secs_f64","assemble","assemble_sub","assert_tag_is","bind_ports","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_index","check_index","checked_add","checked_add","checked_div","checked_duration_since","checked_mul","checked_sub","checked_sub","cleanup_tag","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","declare_triggers","declare_uses","default","default","default","delay","div","div_assign","div_duration_f32","div_duration_f64","div_f32","div_f64","duration_since","effects_port","elapsed","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fix_cur_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_foreign","from_foreign","from_micros","from_millis","from_nanos","from_raw","from_raw","from_raw_unchecked","from_raw_unchecked","from_secs","from_secs_f32","from_secs_f64","from_usize","from_usize","from_usize","from_usize","from_usize_unchecked","from_usize_unchecked","get","get","get","get_id","get_mut","get_mut","get_value","hash","hash","hash","hash","hash","hash","hash","hash","id","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_input","is_present","is_present","is_zero","keep_alive","len","microstep","mul","mul_assign","mul_f32","mul_f64","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new_const","new_const","new_logical_action","new_physical_action","new_port","new_port_bank","new_port_bank_const","new_reactions","new_timer","now","offset","offset_from_t0","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","period","prelude","raw","raw","react_erased","register_reactor","rem","rem","request_stop","run_main","saturating_add","saturating_duration_since","saturating_mul","saturating_sub","schedule_physical","schedule_physical_with_v","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","subsec_micros","subsec_millis","subsec_nanos","sum","sum","tag","timeout","to_duration","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_secs_f32","try_from_secs_f64","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_parse_duration","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_value_ref","Duration","EventTag","LogicalAction","ORIGIN","PhysicalActionRef","PhysicalInstant","ReactionCtx","ReadablePort","Timer","WritablePort","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","duration_since_start","eq","equivalent","fmt","fmt","from","from","from","from","from","from","from","get","get_elapsed_logical_time","get_elapsed_physical_time","get_logical_time","get_physical_time","get_start_time","get_tag","get_value","get_value","get_value","get_value","hash","into","into","into","into","into","into","into","is_periodic","is_present","is_present","is_present","is_present","microstep","microstep","ne","new","new","offset","offset","offset_from_t0","partial_cmp","period","request_stop","schedule","schedule_with_v","set","spawn_physical_thread","to_logical_time","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_ref","use_ref_opt","use_value_ref","use_value_ref","use_value_ref","use_value_ref"],"q":["reactor_rtreactor_rt::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Will be scheduled at least after the provided duration. …","Will be scheduled as soon as possible. This does not mean …","Helper struct to assemble reactors during initialization. …","An error occurring during initialization of the reactor …","Does this index type assert if asked to construct an index…","Does this index type assert if asked to construct an index…","","A <code>Duration</code> type to represent a span of time, typically …","The tag of an event.","Global identifier for a reaction.","","Type of a local reaction ID","A logical action.","The maximum duration.","If <code>Self::CHECKS_MAX_INDEX</code> is true, we’ll assert if …","If <code>Self::CHECKS_MAX_INDEX</code> is true, we’ll assert if …","Exclusive maximum value of the <code>local_rid</code> parameter of […","","The duration of one microsecond.","","The duration of one millisecond.","","Type of the microsteps of an EventTag.","Internal type, not communicated to reactions. todo Rename …","","The duration of one nanosecond.","The offset from the current logical time after which an …","Type of the construction parameters","A physical action. Physical actions may only be used with …","A reference to a physical action. This thing is cloneable …","A measurement of a monotonically nondecreasing clock. …","A type that can affect the logical event queue to …","Represents a port, which carries values of type <code>T</code>. Ports …","The context in which a reaction executes. Its API allows …","Common trait for actions, ports, and timer objects handed …","The trait used by the framework to interact with the …","The unique identifier of a reactor instance during …","Wrapper around the user struct for safe dispatch.","A read-only reference to a multiport.","A read-only reference to a port.","","The duration of one second.","","","Construction parameters for the scheduler.","The runtime scheduler.","A unit of time, used in LF.","A timer is conceptually a logical action that may …","","Type of the user struct","A write-only reference to a port.","","","A duration of zero time.","","","","","","Panics","","","","","","","","Shorthand for using After together with delay.","Returns the total number of whole microseconds contained …","Returns the total number of whole milliseconds contained …","Returns the total number of nanoseconds contained by this …","Returns the number of <em>whole</em> seconds contained by this …","Returns the number of seconds contained by this <code>Duration</code> …","Returns the number of seconds contained by this <code>Duration</code> …","Assemble the user reactor, ie produce components with …","Assemble a child reactor. The child needs to be registered…","Convenient macro to assert equality of the current tag. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Asserts <code>v <= Self::MAX_INDEX</code> unless …","Asserts <code>v <= Self::MAX_INDEX</code> unless …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …","Checked <code>Duration</code> addition. Computes <code>self + other</code>, …","Checked <code>Duration</code> division. Computes <code>self / other</code>, …","Returns the amount of time elapsed from another instant …","Checked <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …","Checked <code>Duration</code> subtraction. Computes <code>self - other</code>, …","Acknowledge that the given tag is done executing and free …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a Duration value using the same syntax as in LF.","","","Divide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.","Divide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.","Divide <code>Duration</code> by <code>f32</code>.","Divide <code>Duration</code> by <code>f64</code>.","Returns the amount of time elapsed from another instant …","","Returns the amount of time elapsed since this instant was …","","","","","","","","","","","","","","","","","","","Note: this needs to be called after all children reactors …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct this index type from one in a different domain","Construct this index type from one in a different domain","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Construct this index type from the wrapped integer type.","Construct this index type from the wrapped integer type.","Construct from the underlying type without any checks.","Construct from the underlying type without any checks.","Creates a new <code>Duration</code> from the specified number of whole …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Construct this index type from a usize.","","","Construct this index type from a usize.","Construct from a usize without any checks.","Construct from a usize without any checks.","","","","The ID of the reactor being built.","","","Copies the value out, if it is present. Whether a <em>value</em> …","","","","","","","","","The unique ID of this reactor. This is given by the …","","","Get the wrapped index as a usize.","","","Get the wrapped index as a usize.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns whether the trigger is present, given that the …","Returns whether the trigger is present, given that the …","Returns true if this <code>Duration</code> spans no time.","If true, we won’t shut down the scheduler as soon as …","","The microstep of this tag.","","","Multiplies <code>Duration</code> by <code>f32</code>.","Multiplies <code>Duration</code> by <code>f64</code>.","","","","","","","","","","","Construct this index type from a usize. Alias for …","Construct this index type from a usize. Alias for …","","Creates a new <code>Duration</code> from the specified number of whole …","","","","","","","","Create N reactions. The first <code>num_non_synthetic</code> get …","","Returns an instant corresponding to “now”.","Minimal duration after the start of the program after …","The time offset from the origin of the logical timeline. …","","","","","","","","","Period between events emitted by this timer. A period of …","The prelude that is imported at the top of reactor files …","Get the wrapped index.","Get the wrapped index.","Execute a single user-written reaction. Dispatches on the …","Register a child reactor.","","","Request that the application shutdown, possibly with a …","","Saturating <code>Duration</code> addition. Computes <code>self + other</code>, …","Returns the amount of time elapsed from another instant …","Saturating <code>Duration</code> multiplication. Computes <code>self * other</code>…","Saturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …","Schedule an action to run after its own implicit time …","Schedule an action to run after its own implicit time …","","","","","","","","","","","","","","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in …","","","Convenient macro to create a tag. This is just a …","Timeout of reactor execution. If provided, the reactor …","","","","","","","","","","","","","","","","","","","","","","","","","","This recognizes the same strings as LF","","","","","","","","The checked version of <code>from_secs_f32</code>.","The checked version of <code>from_secs_f64</code>.","","","","","","","","","","","","","","","","","","","Parse a duration from a string. This is used for CLI …","","","","","","","","","","","","","","","","","","","Execute an action using the current value of this trigger.…","A <code>Duration</code> type to represent a span of time, typically …","The tag of an event.","A logical action.","The tag of the startup event.","A reference to a physical action. This thing is cloneable …","A measurement of a monotonically nondecreasing clock. …","The context in which a reaction executes. Its API allows …","A read-only reference to a port.","A timer is conceptually a logical action that may …","A write-only reference to a port.","","","","","","","","","","","","","","","","","","","","Returns the amount of time elapsed since the start of the …","","","","","","","","","","","","Returns the current value of a port or action at this …","Returns the amount of logical time elapsed since the …","Returns the amount of physical time elapsed since the …","Returns the current logical time.","Returns the current physical time.","Returns the start time of the execution of this program.","Returns the tag at which the reaction executes.","","","","","","","","","","","","","Whether the timer should repeat itself. A period of zero …","Returns true if the given action was triggered at the …","","","","Returns the microstep of this tag.","The microstep of this tag.","","","","Create a new tag from its offset from t0 and a microstep. …","Minimal duration after the start of the program after …","The time offset from the origin of the logical timeline. …","","Period between events emitted by this timer. A period of …","Request that the application shutdown, possibly with a …","Schedule an action to trigger at some point in the future.…","Schedule an action to trigger at some point in the future,","Sets the value of the given port.","Spawn a new thread that can use a PhysicalSchedulerLink …","Returns the logical instant for this tag, using the …","","","","","","","","","","","","","","","","","","","","","","","","","Executes the provided closure on the value of the port or …","Executes the provided closure on the value of the port, …","","","",""],"i":[1,1,0,0,2,3,4,0,0,0,4,0,0,5,2,3,6,4,5,4,5,4,0,0,4,5,0,6,0,0,0,0,0,0,0,0,0,0,0,0,4,5,7,7,0,0,0,0,0,6,0,8,2,5,8,2,2,3,3,9,5,2,2,3,3,9,5,0,5,5,5,5,5,5,6,10,0,10,11,12,10,13,14,15,16,17,18,1,8,4,2,3,19,7,9,5,11,12,10,13,14,15,16,17,18,1,8,4,2,3,19,7,9,5,2,3,9,5,5,9,5,9,5,20,18,1,8,2,3,19,9,5,18,1,8,2,3,19,9,5,8,2,3,19,9,5,10,10,11,3,5,0,5,5,5,5,5,5,9,10,9,1,8,2,2,3,3,19,7,9,5,1,8,2,3,19,7,9,5,10,15,17,17,1,8,8,4,2,2,3,3,19,19,7,9,5,11,12,10,13,14,15,16,17,18,1,8,4,2,2,3,3,19,7,9,5,2,3,5,5,5,2,3,2,3,5,5,5,2,2,3,3,2,3,14,2,3,10,2,3,21,1,8,2,3,19,7,9,5,20,13,14,2,2,2,3,3,3,13,2,3,11,12,10,13,14,15,16,17,18,1,8,4,2,3,19,7,9,5,14,15,21,21,5,11,14,22,5,5,5,5,1,8,2,3,19,7,9,5,14,8,2,3,19,5,2,3,10,10,10,10,10,10,10,9,23,22,8,2,2,3,3,19,9,5,23,0,2,3,20,10,2,3,18,12,5,9,5,5,18,18,2,2,3,3,9,9,5,2,2,3,3,9,5,5,5,5,5,5,0,11,4,18,1,8,2,3,19,9,5,17,8,2,3,19,11,12,10,13,14,15,16,17,18,1,8,4,4,2,3,19,7,9,5,5,5,11,12,10,13,14,15,16,17,18,1,8,4,2,3,19,7,9,5,0,11,12,10,13,14,15,16,17,18,1,8,4,2,3,19,7,9,5,21,0,0,0,22,0,0,0,0,0,0,24,25,26,27,23,22,28,24,25,26,27,23,22,28,22,28,22,28,22,22,22,22,22,22,24,25,26,27,23,22,28,24,24,24,24,24,24,24,25,27,23,28,22,24,25,26,27,23,22,28,23,24,27,23,28,22,22,22,25,26,22,23,22,22,23,24,24,24,24,24,22,22,28,22,24,25,26,27,23,22,28,24,25,26,27,23,22,28,24,25,26,27,23,22,28,24,24,25,27,23,28],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u32",15]]],[[["localreactionid",3]],["localreactionid",3]],[[["usize",15]]],[[["usize",15]]],[[["reactorid",3]],["reactorid",3]],[[["duration",3]],["instant",3]],[[["duration",3]],["duration",3]],[[["localreactionid",3]]],[[["usize",15]]],[[["reactorid",3]]],[[["usize",15]]],[[["duration",3]]],[[["duration",3]]],null,[[],["u128",15]],[[],["u128",15]],[[],["u128",15]],[[],["u64",15]],[[],["f32",15]],[[],["f64",15]],[[["assemblyctx",3]],[["assemblyerror",3],["result",4,["assemblyerror"]]]],[[["str",15]],[["assemblyerror",3],["result",4,["assemblyerror"]],["reactorinitializer",8]]],null,[[["port",3]],[["assemblyerror",3],["result",4,["assemblyerror"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["duration",3]],[["instant",3],["option",4,["instant"]]]],[[["duration",3]],[["option",4,["duration"]],["duration",3]]],[[["u32",15]],[["option",4,["duration"]],["duration",3]]],[[["instant",3]],[["option",4,["duration"]],["duration",3]]],[[["u32",15]],[["option",4,["duration"]],["duration",3]]],[[["duration",3]],[["instant",3],["option",4,["instant"]]]],[[["duration",3]],[["option",4,["duration"]],["duration",3]]],[[["cleanupctx",3]]],[[],["physicalschedulerlink",3]],[[],["offset",4]],[[],["microstep",3]],[[],["localreactionid",3]],[[],["reactorid",3]],[[],["globalreactionid",3]],[[],["instant",3]],[[],["duration",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["microstep",3]],["ordering",4]],[[["localreactionid",3]],["ordering",4]],[[["reactorid",3]],["ordering",4]],[[["globalreactionid",3]],["ordering",4]],[[["instant",3]],["ordering",4]],[[["duration",3]],["ordering",4]],[[["triggerid",3],["globalreactionid",3]],[["assemblyerror",3],["result",4,["assemblyerror"]]]],[[["globalreactionid",3],["triggerid",3]],[["assemblyerror",3],["result",4,["assemblyerror"]]]],[[]],[[]],[[],["duration",3]],null,[[["u32",15]],["duration",3]],[[["u32",15]]],[[["duration",3]],["f32",15]],[[["duration",3]],["f64",15]],[[["f32",15]],["duration",3]],[[["f64",15]],["duration",3]],[[["instant",3]],["duration",3]],[[["globalreactionid",3],["port",3]],[["assemblyerror",3],["result",4,["assemblyerror"]]]],[[],["duration",3]],[[["offset",4]],["bool",15]],[[["microstep",3]],["bool",15]],[[["usize",15]],["bool",15]],[[["localreactionid",3]],["bool",15]],[[["usize",15]],["bool",15]],[[["reactorid",3]],["bool",15]],[[["globalreactionid",3]],["bool",15]],[[["triggerid",3]],["bool",15]],[[["instant",3]],["bool",15]],[[["duration",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["reactorid",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[["idx",8]]],[[["idx",8]]],[[["u64",15]],["duration",3]],[[["u64",15]],["duration",3]],[[["u64",15]],["duration",3]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[["u16",15]]],[[["u64",15]],["duration",3]],[[["f32",15]],["duration",3]],[[["f64",15]],["duration",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["readableport",3]],[[["indexslice",3]],["option",4]],[[["indexslice",3]],["option",4]],[[],["reactorid",3]],[[["indexslice",3]],["option",4]],[[["indexslice",3]],["option",4]],[[["eventtag",3],["instant",3]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["reactorid",3]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[["indexslice",3]]],[[],["usize",15]],[[["indexslice",3]]],[[],["usize",15]],[[["usize",15]]],[[["indexslice",3]]],[[["indexslice",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["eventtag",3],["instant",3]],["bool",15]],[[["eventtag",3],["instant",3]],["bool",15]],[[],["bool",15]],null,[[],["usize",15]],null,[[["u32",15]],["duration",3]],[[["u32",15]]],[[["f32",15]],["duration",3]],[[["f64",15]],["duration",3]],[[["offset",4]],["bool",15]],[[["microstep",3]],["bool",15]],[[["localreactionid",3]],["bool",15]],[[["reactorid",3]],["bool",15]],[[["globalreactionid",3]],["bool",15]],[[["triggerid",3]],["bool",15]],[[["instant",3]],["bool",15]],[[["duration",3]],["bool",15]],[[["multiport",3]]],[[["u32",15]]],[[["usize",15]]],[[["usize",15]]],[[["reactorid",3],["localreactionid",3]]],[[["u64",15],["u32",15]],["duration",3]],[[["u16",15]]],[[["u16",15]]],[[["duration",3],["option",4,["duration"]],["str",15]],[["sync",8],["logicalaction",3]]],[[["duration",3],["option",4,["duration"]],["str",15]],[["physicalactionref",3],["sync",8]]],[[["bool",15],["str",15]],[["port",3],["sync",8]]],[[["bool",15],["usize",15],["str",15]],[["multiport",3],["sync",8]]],[[["bool",15],["str",15]]],[[["usize",15]]],[[["duration",3],["str",15]],["timer",3]],[[],["instant",3]],null,null,[[["microstep",3]],[["option",4,["ordering"]],["ordering",4]]],[[["usize",15]],[["ordering",4],["option",4,["ordering"]]]],[[["localreactionid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["usize",15]],[["ordering",4],["option",4,["ordering"]]]],[[["reactorid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["globalreactionid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["instant",3]],[["option",4,["ordering"]],["ordering",4]]],[[["duration",3]],[["option",4,["ordering"]],["ordering",4]]],null,null,[[],["u16",15]],[[],["u16",15]],[[["localreactionid",3],["reactionctx",3]]],[[["reactorinitializer",8]]],[[["usize",15]]],[[["usize",15]]],[[["offset",4]],[["result",4,["senderror"]],["senderror",3]]],[[["scheduleroptions",3]]],[[["duration",3]],["duration",3]],[[["instant",3]],["duration",3]],[[["u32",15]],["duration",3]],[[["duration",3]],["duration",3]],[[["offset",4],["physicalactionref",3]],[["senderror",3,["option"]],["result",4,["senderror"]]]],[[["offset",4],["physicalactionref",3],["option",4],["sync",8]],[["senderror",3,["option"]],["result",4,["senderror"]]]],[[["usize",15]]],[[["localreactionid",3]],["localreactionid",3]],[[["usize",15]]],[[["reactorid",3]],["reactorid",3]],[[["duration",3]],["instant",3]],[[["instant",3]],["duration",3]],[[["duration",3]],["duration",3]],[[["usize",15]]],[[["localreactionid",3]]],[[["reactorid",3]]],[[["usize",15]]],[[["duration",3]]],[[["duration",3]]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["duration",3]],[[],["duration",3]],null,null,[[["u64",15]],["duration",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["f32",15]],[["fromsecserror",3],["duration",3],["result",4,["duration","fromsecserror"]]]],[[["f64",15]],[["fromsecserror",3],["duration",3],["result",4,["duration","fromsecserror"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",15]],[["result",4,["duration","string"]],["string",3],["duration",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["eventtag",3],["instant",3]]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["eventtag",3]],[[],["physicalactionref",3]],[[]],[[]],[[["eventtag",3]],["ordering",4]],[[],["duration",3]],[[["eventtag",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["copy",8],["option",4]]],[[],["duration",3]],[[],["duration",3]],[[],["instant",3]],[[],["physicalinstant",3]],[[],["physicalinstant",3]],[[],["eventtag",3]],[[["eventtag",3],["instant",3]],["option",4]],[[["eventtag",3],["instant",3]],["option",4]],[[["eventtag",3],["instant",3]],["option",4]],[[["eventtag",3],["instant",3]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["eventtag",3],["instant",3]],["bool",15]],[[["eventtag",3],["instant",3]],["bool",15]],[[["eventtag",3],["instant",3]],["bool",15]],[[],["microstep",3]],null,[[["eventtag",3]],["bool",15]],[[["port",3]]],[[["port",3]]],[[["u32",15],["duration",3]]],null,null,[[["eventtag",3]],[["option",4,["ordering"]],["ordering",4]]],null,[[["offset",4]]],[[["offset",4],["logicalaction",3]]],[[["offset",4],["logicalaction",3],["option",4],["sync",8]]],[[]],[[],["scopedjoinhandle",3]],[[["instant",3]],["instant",3]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[],["option",4]],[[["eventtag",3],["instant",3]]],[[["eventtag",3],["instant",3]]],[[["eventtag",3],["instant",3]]],[[["eventtag",3],["instant",3]]]],"p":[[4,"Offset"],[3,"LocalReactionId"],[3,"ReactorId"],[4,"TimeUnit"],[3,"Duration"],[8,"ReactorInitializer"],[3,"TriggerId"],[3,"MicroStep"],[3,"PhysicalInstant"],[3,"AssemblyCtx"],[3,"SchedulerOptions"],[3,"SyncScheduler"],[3,"MultiPort"],[3,"ReadableMultiPort"],[3,"Port"],[3,"PhysicalAction"],[3,"AssemblyError"],[3,"PhysicalSchedulerLink"],[3,"GlobalReactionId"],[8,"ReactorBehavior"],[8,"ReactionTrigger"],[3,"EventTag"],[3,"Timer"],[3,"ReactionCtx"],[3,"ReadablePort"],[3,"WritablePort"],[3,"LogicalAction"],[3,"PhysicalActionRef"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};