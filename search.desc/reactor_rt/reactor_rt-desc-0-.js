searchState.loadedDescShard("reactor_rt", 0, "The runtime library for reactor programs generated by LFC, …\nSpecify that the trigger will fire at least after the …\nSpecify that the trigger will fire as soon as possible. …\nA type that can affect the logical event queue to implement\nA <code>Duration</code> type to represent a span of time, typically …\nThe tag of an event.\nGlobal identifier for a reaction.\nA measurement of a monotonically nondecreasing clock. …\nID of a reaction local to its containing reactor.\nA logical action.\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nType of the microsteps of an EventTag.\nA multiport is a vector of independent ports (its <em>channels</em>)\nThe duration of one nanosecond.\nThe tag of the startup event.\nAn offset from the current event.\nA physical action. Physical actions may only be used with …\nA reference to a physical action. This thing is cloneable …\nRepresents a port, which carries values of type <code>T</code>. Ports …\nThe context in which a reaction executes. Its API allows …\nCommon trait for actions, ports, and timer objects handed …\nThe trait used by the framework to interact with the …\nThe unique identifier of a reactor instance during …\nThe duration of one second.\nImplemented by LogicalAction and PhysicalAction references …\nConstruction parameters for the scheduler.\nThe runtime scheduler.\nA unit of time, used in LF.\nA timer is conceptually a logical action that may …\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nShorthand for using After together with delay.\nShorthand for using After together with delay.\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nModule containing the API to initialize a reactor program.\nConvenient macro to assert equality of the current tag. …\nConvenient macro to assert equality of the current tag. …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nReturns the amount of time elapsed from another instant to …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nAcknowledge that the given tag is done executing and free …\nCreates a Duration value using the same syntax as in LF.\nCreates a Duration value using the same syntax as in LF.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.\nDivides <code>Duration</code> by <code>f32</code>.\nDivides <code>Duration</code> by <code>f64</code>.\nIf true, dump the dependency graph to a file before …\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed since the start of the …\nReturns the amount of time elapsed since this instant.\nIterate over only those channels that are set (have a …\nIterate over only those channels that are set (have a …\nIterate over only those channels that are set (have a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of weeks.\nReturns the current value of a port or action at this …\nReturns the amount of logical time elapsed since the start …\nReturns the amount of physical time elapsed since the …\nReturns the current logical time.\nReturns the current physical time.\nReturns a reference to the current value of a port or …\nReturns the start time of the execution of this program.\nReturns the tag at which the reaction executes.\nCopies the value out, if it is present. Whether a <em>value</em> is …\nThe unique ID of this reactor. This is given by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this multiport is empty.\nWhether the timer should repeat itself. A period of zero …\nReturns true if the given action was triggered at the …\nReturns whether the trigger is present, given that the …\nReturns whether the trigger is present, given that the …\nReturns whether this tag is the shutdown tag of the …\nReturns true if this <code>Duration</code> spans no time.\nIterate over the channels of this multiport. Returns …\nIterate over the multiport and return mutable references …\nIterate over only those channels that are set (have a …\nIterate over only those channels that are set (have a …\nIterate over only those ports that are set (have a value), …\nIf true, we won’t shut down the scheduler as soon as the …\nReturns the number of channels.\nReturns the microstep of this tag.\nThe microstep of this tag.\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nCreates a new <code>Duration</code> from the specified number of whole …\nReturns an instant corresponding to “now”.\nReturns the number of active workers in the execution of a …\nCreate a new tag from its offset from t0 and a microstep. …\nMinimal duration after the start of the program after …\nThe time offset from the origin of the logical timeline. …\nPeriod between events emitted by this timer. A period of …\nThe prelude that is imported at the top of reactor files …\nExecute a single user-written reaction. Dispatches on the …\nRequest that the application shutdown, possibly with a …\nRequest that the application shutdown, possibly with a …\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nReturns the amount of time elapsed from another instant to …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nSchedule an action to trigger at some point in the future. …\nSchedule an action to run after its own implicit time delay\nSchedule an action to run after its own implicit time delay\nSchedule an action to trigger at some point in the future,\nSets the value of the given port.\nSets the value of the given port, if the given value is …\nSpawn a new thread that can use a AsyncCtx to push …\nReturns the amount of time elapsed from another instant to …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nConvenient macro to create a tag. This is just a shorthand …\nConvenient macro to create a tag. This is just a shorthand …\nMax number of threads to use in the thread pool. If zero, …\nTimeout of reactor execution. If provided, the reactor …\nReturns the logical instant for this tag, using the …\nThis recognizes the same strings as LF\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nParse a duration from a string. This is used for CLI …\nExecutes the provided closure on the value of the port or …\nExecutes the provided closure on the value of the port, …\nExecute an action using the current value of this trigger. …\nReturns true if the scheduler has been shutdown. When that…\nHelper struct to assemble reactors during initialization. …\nAn error occurring during initialization of the reactor …\nIntermediate result of assembly.\nCreates the components of a reactor.\nDeclares dependencies between components and reactions.\nContains the error value\nFinal result of the assembly of a reactor.\nGlobal identifier for a reaction.\nExclusive maximum value of the <code>local_rid</code> parameter of […\nContains the success value\nType of the construction parameters.\nKind of a port.\nWrapper around the user struct for safe dispatch.\nThe ID of a trigger component.\nType of the user struct, which contains state variables of …\nAssemble this reactor. This initializes state variables, …\ntop level function\nInnermost function.\nBind two ports together.\nBind the ports of the upstream to those of the downstream, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAssembles a child reactor and makes it available in the …\nAssembles a bank of children reactor and makes it …\nA <code>Duration</code> type to represent a span of time, typically …\nA measurement of a monotonically nondecreasing clock. …\nShorthand for using After together with delay.\nConvenient macro to assert equality of the current tag. …\nCreates a Duration value using the same syntax as in LF.\nConvenient macro to create a tag. This is just a shorthand …\nAlias for the unit type, so that it can be written without …")